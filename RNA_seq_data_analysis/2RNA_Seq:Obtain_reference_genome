
#!/bin/bash 
#############################################
## HOW TO OBTAIN & INSPECT REFRENCE GENOME ##
#############################################

#Obtain a reference genome from Ensembl, iGenomes, NCBI or UCSC.
#In this example analysis we will use the human GRCh38 version of the genome from Ensembl. Furthermore, we are actually going to perform the analysis using only a single chromosome (chr22) and the ERCC spike-in to make it run faster.

#First we will create the necessary working directory.

cd $RNA_HOME
echo $RNA_REFS_DIR
mkdir -p $RNA_REFS_DIR

#The complete data from which these files were obtained can be found at: ftp://ftp.ensembl.org/pub/release-86/fasta/homo_sapiens/dna/. You could use wget to download the Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz file, then unzip/untar.

#We have prepared this simplified reference for you. It contains chr22 (and ERCC transcript) fasta files in both a single combined file and individual files. Download the reference genome file to the rnaseq working directory

cd $RNA_REFS_DIR
wget http://genomedata.org/rnaseq-tutorial/fasta/GRCh38/chr22_with_ERCC92.fa
ls

#View the first 10 lines of this file. Why does it look like this?

head chr22_with_ERCC92.fa

#How many lines and characters are in this file? How long is this chromosome (in bases and Mbp)?

wc chr22_with_ERCC92.fa

#View 10 lines from approximately the middle of this file. What is the significance of the upper and lower case characters?

head -n 425000 chr22_with_ERCC92.fa | tail


#first produce a fasta with only the chr22 sequence (i.e. remove the ERCC sequences).
cat chr22_with_ERCC92.fa | perl -ne 'if ($_ =~ /\>22/){$chr22=1}; if ($_ =~ /\>ERCC/){$chr22=0}; if ($chr22){print "$_";}' > chr22_only.fa

 #determine the count of all repeat bases
 #skip the header lines containing the sequence names, count the lower case letters, count the total length, at the end summarize totals.
 cat chr22_only.fa | grep -v ">" | perl -ne 'chomp $_; $r+= $_ =~ tr/a/A/; $r += $_ =~ tr/c/C/; $r += $_ =~ tr/g/G/; $r += $_ =~ tr/t/T/; $l += length($_); if (eof){$p = sprintf("%.2f", ($r/$l)*100); print "\nrepeat bases = $r\ntotal bases = $l\npercent repeat bases = $p%\n\n"}'

 #determine the occurence of an arbitrary short sequence. don't forget to remove all end of line characters before searching for the string of interest.
 cat chr22_only.fa | grep -v ">" | perl -ne 'chomp $_; $s = uc($_); print $_;' | perl -ne '$c += $_ =~ s/GAATTC/XXXXXX/g; if (eof){print "\nEcoRI site (GAATTC) count = $c\n\n";}'
 
 
 
 grep ">" chr22_with_ERCC92.fa 
 
 
 
#Note on complex commands and scripting in Unix
################################################
 
#1. The Perl approach. This command removes the end of line character with chomp, then it splits each line into an array of individual characters, amd it creates a data structure called a hash to store counts of each letter on each line. Once the end of the file is reached it prints out the contents of this data structure in order.  
 time cat chr22_with_ERCC92.fa | grep -v ">" | perl -ne 'chomp $_; $bases{$_}++ for split //; if (eof){print "$bases{$_} $_\n" for sort keys %bases}' | column -t

#2. The Awk approach. Awk is an alternative scripting language include in most linux distributions. This command is conceptually very similar to the Perl approach but with a different syntax. A for loop is used to iterate over each character until the end ("NF") is reached. Again the counts for each letter are stored in a simple data structure and once the end of the file is reach the results are printed.  
 time cat chr22_with_ERCC92.fa | grep -v ">" | awk '{for (i=1; i<=NF; i++){a[$i]++}}END{for (i in a){print a[i], i}}' FS= - | sort -k 2 | column -t

#3. The Sed approach. Sed is an alternative scripting language. "tr" is used to remove newline characters. Then sed is used simply to split each character onto its own line, effectively creating a file with millions of lines. Then unix sort and uniq are used to produce counts of each unique character, and sort is used to order the results consistently with the previous approaches.
 time cat chr22_with_ERCC92.fa | grep -v ">" | tr -d '\n' | sed 's/\(.\)/\1\n/g'  - | sort | uniq -c | sort -k 2 | column -t

#4. The grep appoach. The "-o" option of grep splits each match onto a line which we then use to get a count. The "-i" option makes the matching work for upper/lower case. The "-P" option allows us to use Perl style regular expressions with Greg.
 time cat chr22_with_ERCC92.fa | grep -v ">" | grep -i -o -P "a|c|g|t|y|n" | sort | uniq -c

#5. Finally, the simplest/shortest approach that leverages the unix fold command to split each character onto its own line as in the Sed example.
 time cat chr22_with_ERCC92.fa | grep -v ">" | fold -w1 | sort | uniq -c | column -t




#Obtain Known Gene/Transcript Annotations
#########################################


#Here, we will use annotations obtained from Ensembl (Homo_sapiens.GRCh38.86.gtf.gz) for chromosome 22 only. For time reasons, these are prepared ahead. But it is important to get familiar with sources of gene annotations for RNA-seq analysis.

#Copy the gene annotation files to the working directory.

 echo $RNA_REFS_DIR
 cd $RNA_REFS_DIR
 wget http://genomedata.org/rnaseq-tutorial/annotations/GRCh38/chr22_with_ERCC92.gtf

#Take a look at the contents of the .gtf file. Press q to exit the less display.

 echo $RNA_REF_GTF
 less -p start_codon -S $RNA_REF_GTF

#Note how the -S option makes it easier to veiw this file with less. Make the formatting a bit nicer still:

 cat chr22_with_ERCC92.gtf | column -t | less -p exon -S
 
# How many unique gene IDs are in the .gtf file?

# We can use a perl command-line command to find out:

 perl -ne 'if ($_ =~ /(gene_id\s\"ENSG\w+\")/){print "$1\n"}' $RNA_REF_GTF | sort | uniq | wc -l

#Using perl -ne '' will execute the code between single quotes, on the .gtf file, line-by-line.

#The $_ variable holds the contents of each line.

#The 'if ($_ =~//)' is a pattern-matching command which will look for the pattern “gene_id” followed by a space followed by “ENSG” and one or more word characters (indicated by \w+) surrounded by double quotes.

#The pattern to be matched is enclosed in parentheses. This allows us to print it out from the special variable $1.

#The output of this perl command will be a long list of ENSG Ids.

#By piping to sort, then uniq, then word count we can count the unique number of genes in the file.

#We can also use grep to find this same information.

 cat chr22_with_ERCC92.gtf | grep -w gene | wc -l

#grep -w gene is telling grep to do an exact match for the string ‘gene’. This means that it will return lines that are of the feature type gene.
#Now view the structure of a single transcript in GTF format. Press q to exit the less display when you are done.

 grep ENST00000342247 $RNA_REF_GTF | less -p "exon\s" -S
 
 
#Create a HISAT2 index
#Create a HISAT2 index for chr22 and the ERCC spike-in sequences. HISAT2 can incorporate exons and splice sites into the index file for alignment. First create a splice site file, then an exon file. Finally make the aligner FM index.

#To learn more about how the HISAT2 indexing strategy is distinct from other next gen aligners refer to the HISAT publication.

 cd $RNA_REFS_DIR
 hisat2_extract_splice_sites.py $RNA_REF_GTF > $RNA_REFS_DIR/splicesites.tsv
 hisat2_extract_exons.py $RNA_REF_GTF > $RNA_REFS_DIR/exons.tsv
 hisat2-build -p 4 --ss $RNA_REFS_DIR/splicesites.tsv --exon $RNA_REFS_DIR/exons.tsv $RNA_REF_FASTA $RNA_REF_INDEX
 ls
 